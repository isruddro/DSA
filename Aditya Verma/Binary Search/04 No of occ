https://www.geeksforgeeks.org/problems/number-of-occurrence2259/1

# Same thing as First and Last occ but extra: max_index - min_index + 1


py:

from typing import List

min_index = float('inf')
max_index = float('-inf')

def binary_search(start: int, end: int, arr: List[int], target: int, left_bias: bool) -> None:
    global min_index, max_index
    if start > end:
        return

    mid = (start + end) // 2

    if arr[mid] > target:
        binary_search(start, mid - 1, arr, target, left_bias)
    elif arr[mid] < target:
        binary_search(mid + 1, end, arr, target, left_bias)
    else:
        if left_bias:
            min_index = min(min_index, mid)
            binary_search(start, mid - 1, arr, target, left_bias)
        else:
            max_index = max(max_index, mid)
            binary_search(mid + 1, end, arr, target, left_bias)

def count_occurrences(arr: List[int], x: int) -> int:
    global min_index, max_index
    min_index = float('inf')
    max_index = float('-inf')

    # Find leftmost and rightmost occurrences
    binary_search(0, len(arr) - 1, arr, x, True)
    binary_search(0, len(arr) - 1, arr, x, False)

    if min_index == float('inf'):
        return 0  # Target not found
    return max_index - min_index + 1

if __name__ == "__main__":
    arr = [2, 4, 4, 4, 6, 8, 8, 10]
    x = 4
    count = count_occurrences(arr, x)
    print(f"The count of {x} is: {count}")


cpp:
#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int minIndex = INT_MAX;
int maxIndex = INT_MIN;

void BinarySearch(int start, int end, const vector<int>& arr, int target, bool leftBias) {
    if (start > end) return;

    int mid = (start + end) / 2;

    if (arr[mid] > target) {
        BinarySearch(start, mid - 1, arr, target, leftBias);
    }
    else if (arr[mid] < target) {
        BinarySearch(mid + 1, end, arr, target, leftBias);
    }
    else {
        if (leftBias) {
            minIndex = min(minIndex, mid);
            BinarySearch(start, mid - 1, arr, target, leftBias);
        } else {
            maxIndex = max(maxIndex, mid);
            BinarySearch(mid + 1, end, arr, target, leftBias);
        }
    }
}

int CountOccurrences(const vector<int>& arr, int x) {
    minIndex = INT_MAX;
    maxIndex = INT_MIN;

    BinarySearch(0, arr.size() - 1, arr, x, true);   // Find leftmost occurrence
    BinarySearch(0, arr.size() - 1, arr, x, false);  // Find rightmost occurrence

    if (minIndex == INT_MAX) minIndex = -1;
    if (maxIndex == INT_MIN) maxIndex = -1;

    if (minIndex == -1) return 0;  // Target not found
    return maxIndex - minIndex + 1; // Count of occurrences
}

int main() {
    vector<int> arr = {2, 4, 4, 4, 6, 8, 8, 10};
    int x = 4;

    int count = CountOccurrences(arr, x);
    cout << "The count of " << x << " is: " << count << endl;

    return 0;
}






c#:


using System;

class Program
{
    static int minIndex = int.MaxValue;
    static int maxIndex = int.MinValue;

    static void BinarySearch(int start, int end, int[] arr, int target, bool leftBias)
    {
        if (start > end) return;

        int mid = (start + end) / 2;

        if (arr[mid] > target)
        {
            BinarySearch(start, mid - 1, arr, target, leftBias);
        }
        else if (arr[mid] < target)
        {
            BinarySearch(mid + 1, end, arr, target, leftBias);
        }
        else
        {
            if (leftBias)
            {
                minIndex = Math.Min(minIndex, mid);
                BinarySearch(start, mid - 1, arr, target, leftBias);
            }
            else
            {
                maxIndex = Math.Max(maxIndex, mid);
                BinarySearch(mid + 1, end, arr, target, leftBias);
            }
        }
    }

    static int CountOccurrences(int[] arr, int n, int x)
    {
        minIndex = int.MaxValue;
        maxIndex = int.MinValue;

        BinarySearch(0, n - 1, arr, x, true);  // Find leftmost occurrence
        BinarySearch(0, n - 1, arr, x, false); // Find rightmost occurrence

        if (minIndex == int.MaxValue) minIndex = -1;
        if (maxIndex == int.MinValue) maxIndex = -1;

        if (minIndex == -1) return 0; // Target not found
        return maxIndex - minIndex + 1; // Count of occurrences
    }

    static void Main()
    {
        int[] arr = { 2, 4, 4, 4, 6, 8, 8, 10 };
        int n = arr.Length;
        int x = 4;

        int count = CountOccurrences(arr, n, x);
        Console.WriteLine($"The count of {x} is: {count}");
    }
}
